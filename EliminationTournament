class EliminationTournament(Tournament):
    def __init__(self, seed):
        super().__init__(seed, mode="EliminationTournament")
        self.seed = seed

    def run(self):
        players = self.seed.copy()
        round_num=0
        tree = []
        next_round = []
        matches = []

        # BYE if odd
        if len(players) % 2 != 0:
            bye_player = players.pop()
            next_round.append(bye_player)
            self.results[bye_player.__class__.__name__]["wins"] += 1
            self.results[bye_player.__class__.__name__]["games_played"] += 1
            self.results["log"].append({
                "round": round_num,
                "player1": bye_player.__class__.__name__,
                "player2": "BYE",
                "winner": bye_player.__class__.__name__
            })
            matches.append((bye_player.__class__.__name__, "BYE", bye_player.__class__.__name__))
            print(f"{bye_player.__class__.__name__} gets a BYE")

        while len(players)>1:
            round_num+=1
            print(f"\n=== Round {round_num} ===")
            for i in range(0, len(players), 2):
                strat1 = players[i]
                strat2 = players[i + 1]

                winner, result_str = super().run(strat1, strat2)
                next_round.append(winner)
                matches.append((strat1.__class__.__name__, strat2.__class__.__name__, result_str))

                print(
                    f"{strat1.__class__.__name__} vs {strat2.__class__.__name__} â†’ Winner: {winner.__class__.__name__}")

            tree.append(matches)
            players = next_round


        for round_number, round_games in enumerate(tree, start=1):
            print(f"Round {round_number}:")
            for game in round_games:
                player1, player2, winner = game
                print(f"  {player1} vs {player2} â†’ Winner: {winner}")
            print()
        print(f"Champion: {players}")
