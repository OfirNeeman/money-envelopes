import json
import csv
import statistics
from envelope import Envelope
from Game import Game, GameResult
from strategy import RandomStrategy, StopAfterNOpensStrategy, BetterThanPercentStrategy, MaxAfterNStrategy

class Tournament:
    def __init__(self, strategies, mode):
        self.strategies = strategies
        self.mode = mode
        self.results = {s.__class__.__name__: {"wins": 0, "games_played": 0}
                        for s in strategies}
        self.results["log"] = []

    def run(self, strat1, strat2):
        """Run a single match between two strategies and update results/log"""
        #envelopes = [Envelope() for _ in range(100)]
        game1 = Game(strat1)
        result1 = GameResult(game1)
        game2 = Game(strat2)
        result2 = GameResult(game2)

        game1.reset()
        game2.reset()

        # Update games played
        self.results[strat1.__class__.__name__]["games_played"] += 1
        self.results[strat2.__class__.__name__]["games_played"] += 1

        # Determine winner
        if result1.chosen_amount > result2.chosen_amount:
            winner = strat1
            result_str = strat1.__class__.__name__
            self.results[winner.__class__.__name__]["wins"] += 1
        elif result2.chosen_amount > result1.chosen_amount:
            winner = strat2
            result_str = strat2.__class__.__name__
            self.results[winner.__class__.__name__]["wins"] += 1
        else:
            winner = None
            result_str = "Draw"
            self.results[strat1.__class__.__name__]["wins"] += 1
            self.results[strat2.__class__.__name__]["wins"] += 1

        # Log the match
        self.results["log"].append({
            "player1": strat1.__class__.__name__,
            "chosen1": result1.chosen_amount,
            "player2": strat2.__class__.__name__,
            "chosen2": result2.chosen_amount,
            "winner": result_str
        })
        print(f"{strat1.__class__.__name__} vs {strat2.__class__.__name__} â†’ Winner: {result_str}")
        return winner, result_str

    def get_stats(self):
        stats = {}
        total_games = sum(v.get("games_played", 0) for v in self.results.values() if isinstance(v, dict))
        for strat, data in self.results.items():
            if strat == "log":
                continue
            wins = data["wins"]
            games = data["games_played"]
            profits = data.get("profits", [])
            avg_profit = round(statistics.mean(profits), 2) if profits else 0
            consistency = round(statistics.pstdev(profits), 2) if len(profits) > 1 else 0
            win_rate = round(wins / games, 2) if games > 0 else 0

            stats[strat] = {
                "games_played": games,
                "wins": wins,
                "win_rate": win_rate,
                "avg_profit": avg_profit,
                "consistency": consistency
            }
        return stats, total_games

    def save_log_json(self, filename):
        with open(filename, "w") as f:
            json.dump(self.results["log"], f, indent=4)

    def save_log_csv(self, filename):
        if not self.results["log"]:
            return
        keys = self.results["log"][0].keys()
        with open(filename, "w", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=keys)
            writer.writeheader()
            writer.writerows(self.results["log"])
